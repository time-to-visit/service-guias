// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-user/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryCategories is an autogenerated mock type for the IRepositoryCategories type
type IRepositoryCategories struct {
	mock.Mock
}

// DeleteCategory provides a mock function with given fields: idCategory
func (_m *IRepositoryCategories) DeleteCategory(idCategory int64) error {
	ret := _m.Called(idCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCategory provides a mock function with given fields: idSection
func (_m *IRepositoryCategories) FindCategory(idSection int64) (*[]entity.Categories, error) {
	ret := _m.Called(idSection)

	var r0 *[]entity.Categories
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]entity.Categories, error)); ok {
		return rf(idSection)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]entity.Categories); ok {
		r0 = rf(idSection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idSection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCategoryOne provides a mock function with given fields: idCategory
func (_m *IRepositoryCategories) FindCategoryOne(idCategory int64) (*entity.Categories, error) {
	ret := _m.Called(idCategory)

	var r0 *entity.Categories
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Categories, error)); ok {
		return rf(idCategory)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Categories); ok {
		r0 = rf(idCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCategory provides a mock function with given fields: categories
func (_m *IRepositoryCategories) InsertCategory(categories entity.Categories) (*entity.Categories, error) {
	ret := _m.Called(categories)

	var r0 *entity.Categories
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Categories) (*entity.Categories, error)); ok {
		return rf(categories)
	}
	if rf, ok := ret.Get(0).(func(entity.Categories) *entity.Categories); ok {
		r0 = rf(categories)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Categories) error); ok {
		r1 = rf(categories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryCategories interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryCategories creates a new instance of IRepositoryCategories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryCategories(t mockConstructorTestingTNewIRepositoryCategories) *IRepositoryCategories {
	mock := &IRepositoryCategories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
