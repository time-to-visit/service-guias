// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-user/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryContainerLevels is an autogenerated mock type for the IRepositoryContainerLevels type
type IRepositoryContainerLevels struct {
	mock.Mock
}

// DeleteContainerLevels provides a mock function with given fields: idContainerLevels
func (_m *IRepositoryContainerLevels) DeleteContainerLevels(idContainerLevels int64) error {
	ret := _m.Called(idContainerLevels)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idContainerLevels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindContainerLevels provides a mock function with given fields: idLevels
func (_m *IRepositoryContainerLevels) FindContainerLevels(idLevels int64) (*[]entity.ContainerLevels, error) {
	ret := _m.Called(idLevels)

	var r0 *[]entity.ContainerLevels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]entity.ContainerLevels, error)); ok {
		return rf(idLevels)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]entity.ContainerLevels); ok {
		r0 = rf(idLevels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ContainerLevels)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idLevels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindContainerLevelsOne provides a mock function with given fields: idContainerLevels
func (_m *IRepositoryContainerLevels) FindContainerLevelsOne(idContainerLevels int64) (*entity.ContainerLevels, error) {
	ret := _m.Called(idContainerLevels)

	var r0 *entity.ContainerLevels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.ContainerLevels, error)); ok {
		return rf(idContainerLevels)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.ContainerLevels); ok {
		r0 = rf(idContainerLevels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContainerLevels)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idContainerLevels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertContainerLevels provides a mock function with given fields: containerLevels
func (_m *IRepositoryContainerLevels) InsertContainerLevels(containerLevels entity.ContainerLevels) (*entity.ContainerLevels, error) {
	ret := _m.Called(containerLevels)

	var r0 *entity.ContainerLevels
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.ContainerLevels) (*entity.ContainerLevels, error)); ok {
		return rf(containerLevels)
	}
	if rf, ok := ret.Get(0).(func(entity.ContainerLevels) *entity.ContainerLevels); ok {
		r0 = rf(containerLevels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContainerLevels)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.ContainerLevels) error); ok {
		r1 = rf(containerLevels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryContainerLevels interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryContainerLevels creates a new instance of IRepositoryContainerLevels. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryContainerLevels(t mockConstructorTestingTNewIRepositoryContainerLevels) *IRepositoryContainerLevels {
	mock := &IRepositoryContainerLevels{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
