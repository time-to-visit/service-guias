// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-user/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryObjectives is an autogenerated mock type for the IRepositoryObjectives type
type IRepositoryObjectives struct {
	mock.Mock
}

// DeleteObjective provides a mock function with given fields: idObjective
func (_m *IRepositoryObjectives) DeleteObjective(idObjective int64) error {
	ret := _m.Called(idObjective)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idObjective)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindObjectiveByLevel provides a mock function with given fields: idLevels
func (_m *IRepositoryObjectives) FindObjectiveByLevel(idLevels int64) (*[]entity.Objectives, error) {
	ret := _m.Called(idLevels)

	var r0 *[]entity.Objectives
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]entity.Objectives, error)); ok {
		return rf(idLevels)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]entity.Objectives); ok {
		r0 = rf(idLevels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Objectives)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idLevels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindObjectiveOne provides a mock function with given fields: idObjective
func (_m *IRepositoryObjectives) FindObjectiveOne(idObjective int64) (*entity.Objectives, error) {
	ret := _m.Called(idObjective)

	var r0 *entity.Objectives
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Objectives, error)); ok {
		return rf(idObjective)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Objectives); ok {
		r0 = rf(idObjective)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Objectives)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idObjective)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertObjective provides a mock function with given fields: objective
func (_m *IRepositoryObjectives) InsertObjective(objective entity.Objectives) (*entity.Objectives, error) {
	ret := _m.Called(objective)

	var r0 *entity.Objectives
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Objectives) (*entity.Objectives, error)); ok {
		return rf(objective)
	}
	if rf, ok := ret.Get(0).(func(entity.Objectives) *entity.Objectives); ok {
		r0 = rf(objective)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Objectives)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Objectives) error); ok {
		r1 = rf(objective)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryObjectives interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryObjectives creates a new instance of IRepositoryObjectives. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryObjectives(t mockConstructorTestingTNewIRepositoryObjectives) *IRepositoryObjectives {
	mock := &IRepositoryObjectives{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
