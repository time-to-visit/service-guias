// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-user/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositorySection is an autogenerated mock type for the IRepositorySection type
type IRepositorySection struct {
	mock.Mock
}

// DeleteSection provides a mock function with given fields: idSection
func (_m *IRepositorySection) DeleteSection(idSection int64) error {
	ret := _m.Called(idSection)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idSection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSection provides a mock function with given fields: filter
func (_m *IRepositorySection) FindSection(filter map[string]interface{}) (*[]entity.Section, error) {
	ret := _m.Called(filter)

	var r0 *[]entity.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*[]entity.Section, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *[]entity.Section); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSectionOne provides a mock function with given fields: idSection
func (_m *IRepositorySection) FindSectionOne(idSection int64) (*entity.Section, error) {
	ret := _m.Called(idSection)

	var r0 *entity.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Section, error)); ok {
		return rf(idSection)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Section); ok {
		r0 = rf(idSection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idSection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSection provides a mock function with given fields: section
func (_m *IRepositorySection) InsertSection(section entity.Section) (*entity.Section, error) {
	ret := _m.Called(section)

	var r0 *entity.Section
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Section) (*entity.Section, error)); ok {
		return rf(section)
	}
	if rf, ok := ret.Get(0).(func(entity.Section) *entity.Section); ok {
		r0 = rf(section)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Section)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Section) error); ok {
		r1 = rf(section)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositorySection interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositorySection creates a new instance of IRepositorySection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositorySection(t mockConstructorTestingTNewIRepositorySection) *IRepositorySection {
	mock := &IRepositorySection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
