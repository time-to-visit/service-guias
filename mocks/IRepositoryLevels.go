// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-user/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryLevels is an autogenerated mock type for the IRepositoryLevels type
type IRepositoryLevels struct {
	mock.Mock
}

// DeleteLevels provides a mock function with given fields: idLevels
func (_m *IRepositoryLevels) DeleteLevels(idLevels int64) error {
	ret := _m.Called(idLevels)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idLevels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindLevelsByCategory provides a mock function with given fields: idCategory
func (_m *IRepositoryLevels) FindLevelsByCategory(idCategory int64) (*[]entity.Levels, error) {
	ret := _m.Called(idCategory)

	var r0 *[]entity.Levels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]entity.Levels, error)); ok {
		return rf(idCategory)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]entity.Levels); ok {
		r0 = rf(idCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Levels)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLevelsOne provides a mock function with given fields: idLevels
func (_m *IRepositoryLevels) FindLevelsOne(idLevels int64) (*entity.Levels, error) {
	ret := _m.Called(idLevels)

	var r0 *entity.Levels
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Levels, error)); ok {
		return rf(idLevels)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Levels); ok {
		r0 = rf(idLevels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Levels)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idLevels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLevels provides a mock function with given fields: levels
func (_m *IRepositoryLevels) InsertLevels(levels entity.Levels) (*entity.Levels, error) {
	ret := _m.Called(levels)

	var r0 *entity.Levels
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Levels) (*entity.Levels, error)); ok {
		return rf(levels)
	}
	if rf, ok := ret.Get(0).(func(entity.Levels) *entity.Levels); ok {
		r0 = rf(levels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Levels)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Levels) error); ok {
		r1 = rf(levels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryLevels interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryLevels creates a new instance of IRepositoryLevels. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryLevels(t mockConstructorTestingTNewIRepositoryLevels) *IRepositoryLevels {
	mock := &IRepositoryLevels{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
